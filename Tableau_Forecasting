SCRIPT_REAL(
'
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
import numpy as np

# Example data setup
dates = _arg1  # Dates array
passeng = _arg2  # Passengers array
months_forecast = min(_arg3)  # Months to forecast

df = pd.DataFrame({"Month": dates, "Passengers": passeng})
df["Month"] = pd.to_datetime(df["Month"], format="%Y-%m")
df.set_index("Month", inplace=True)

# Split data into train and test
train_size = int(len(df) * 0.8)
train, test = df[0:train_size], df[train_size:len(df)]

# Define the p, d, q ranges to test
p = range(0, 3)  # Example: 0, 1, 2
d = range(0, 2)  # Example: 0, 1
q = range(0, 3)  # Example: 0, 1, 2

best_score, best_cfg = float("inf"), None

# Grid search
for pi in p:
    for di in d:
        for qi in q:
            order = (pi, di, qi)
            try:
                model = ARIMA(train, order=order)
                model_fit = model.fit()
                forecast = model_fit.get_forecast(steps=len(test))
                forecast_values = forecast.summary_frame()['mean']
                error = mean_squared_error(test['Passengers'], forecast_values)
                if error < best_score:
                    best_score, best_cfg = error, order
                print('ARIMA%s RMSE=%.3f' % (order, np.sqrt(error)))
            except:
                continue

print('Best ARIMA%s RMSE=%.3f' % (best_cfg, np.sqrt(best_score)))

# Fit the best model
model = ARIMA(df, order=best_cfg)
fitted_model = model.fit()

# Forecast if needed
if months_forecast > 0:
    forecast = fitted_model.get_forecast(steps=months_forecast)
    forecast_values = forecast.summary_frame()['mean']
    forecast_values = forecast_values.apply(lambda x: max(x, 0))  # Ensure non-negative forecasts
    results = list(train['Passengers']) + forecast_values.tolist()
    return results[-len(df):]
else:
    return list(train['Passengers'])
',
ATTR([Month]), ATTR([#Passengers]), MIN([Months Forecast])
)
