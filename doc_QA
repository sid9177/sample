import openai
import streamlit as st
import pandas as pd
from PyPDF2 import PdfReader
import openpyxl

# Azure OpenAI Configuration
AZURE_API_KEY = "your_azure_api_key"
AZURE_ENDPOINT = "https://your-azure-endpoint.openai.azure.com/"
AZURE_DEPLOYMENT_NAME = "your-deployment-name"
AZURE_API_VERSION = "2023-05-15"  # Replace with your API version

# Configure the Azure OpenAI client
openai.api_type = "azure"
openai.api_key = AZURE_API_KEY
openai.api_base = AZURE_ENDPOINT
openai.api_version = AZURE_API_VERSION

def extract_text_from_pdf(pdf_file):
    """Extract text from an uploaded PDF file."""
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    return text

def read_formulas_from_excel(excel_file) -> str:
    """
    Read the Excel file using openpyxl and collect formulas as a single string.
    This function returns all formulas found in each cell of every sheet.
    """
    workbook = openpyxl.load_workbook(excel_file, data_only=False)  # data_only=False to get formulas
    formulas = []
    
    for sheet_name in workbook.sheetnames:
        sheet = workbook[sheet_name]
        for row in sheet.iter_rows():
            for cell in row:
                # If the cell has a formula, store it
                if cell.value and isinstance(cell.value, str) and cell.value.startswith('='):
                    formulas.append(f"Sheet: {sheet_name}, Cell: {cell.coordinate}, Formula: {cell.value}")
    
    # Combine everything into a single string
    if formulas:
        return "\n".join(formulas)
    else:
        return "No formulas found or no formula cells in this file."

def query_azure_openai(system_prompt, user_query, deployment_name):
    """
    Send messages to Azure OpenAI and get a response.
    - system_prompt: High-level instructions and data context
    - user_query: The user's question
    """
    response = openai.ChatCompletion.create(
        engine=deployment_name,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_query},
        ],
        temperature=0.7,
        max_tokens=700,
    )
    return response["choices"][0]["message"]["content"]

# Streamlit UI
st.title("GenAI Chatbot with Policy, Methodology, Excel Formulas, and CSV Data")

# Step 1: Upload Policy / Procedure Document (PDF)
policy_file = st.file_uploader("Step 1: Upload Policy / Procedure Document (PDF)", type=["pdf"])
if policy_file:
    policy_text = extract_text_from_pdf(policy_file)
    st.success("Policy/Procedure PDF uploaded and processed.")
    st.text_area("Policy Content:", policy_text, height=150)

# Step 2: Upload Methodology Document (PDF)
if policy_file:
    methodology_file = st.file_uploader("Step 2: Upload Methodology Document (PDF)", type=["pdf"])
    if methodology_file:
        methodology_text = extract_text_from_pdf(methodology_file)
        st.success("Methodology PDF uploaded and processed.")
        st.text_area("Methodology Content:", methodology_text, height=150)

# Step 3: Upload Excel Formula File
if policy_file and methodology_file:
    excel_file = st.file_uploader("Step 3: Upload the Excel File (XLSX) with Formulas", type=["xlsx"])
    if excel_file:
        excel_formulas = read_formulas_from_excel(excel_file)
        st.success("Excel Formula File uploaded and processed.")
        st.text_area("Excel Formulas Extracted:", excel_formulas, height=150)

# Step 4: Upload CSV File
if policy_file and methodology_file and excel_file:
    csv_file = st.file_uploader("Step 4: Upload Data (CSV) with Metrics", type=["csv"])
    if csv_file:
        csv_data = pd.read_csv(csv_file)
        st.success("CSV file uploaded and processed.")
        st.write("CSV Data Preview:", csv_data.head())

# Initialize Chatbot once all required files are present
if policy_file and methodology_file and excel_file and csv_file:
    st.info("Initializing chatbot with uploaded data...")

    # Convert the entire CSV to a string (Note: large CSV can exceed token limit)
    csv_data_str = csv_data.to_csv(index=False)

    # Combine all knowledge into a single system prompt
    system_instructions = f"""
You are an AI assistant with access to the following information:

1. **Policy/Procedure Document**:
{policy_text}

2. **Methodology Document**:
{methodology_text}

3. **Excel Formulas** (from the provided Excel file):
{excel_formulas}

4. **CSV File Contents** (the final metrics CSV file):
{csv_data_str}

INSTRUCTIONS:
- If the user asks about policy or procedure, refer to the Policy/Procedure PDF text.
- If the user asks about methodology, reference the Methodology PDF text.
- If the user asks about how the CSV was built or the logic behind it, check the Excel formulas.
- If the user asks about specific data points or metrics, refer to the CSV data.
- Combine all sources as needed to provide thorough and concise answers.
"""

    st.success("Chatbot ready! Ask your questions below.")

    # Chat Interface
    user_input = st.text_input("Ask a question:")
    if user_input:
        # Query Azure OpenAI
        response = query_azure_openai(system_instructions, user_input, AZURE_DEPLOYMENT_NAME)
        st.write("Chatbot Response:", response)
